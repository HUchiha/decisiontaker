{"version":3,"sources":["move.svg","Result.js","App.js","serviceWorker.js","index.js"],"names":["Result","this","props","question","Answer","Math","floor","random","className","style","color","answer1","answer2","answer3","answer4","to","exact","path","React","Component","App","state","item","type","itemValue","target","value","setState","src","logo","alt","render","placeholder","onChange","getItem","title","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQAAe,MAA0B,iC,mCCKnCA,E,4JACJ,WAE+BC,KAAKC,MAAMC,SACxC,IAAIC,EAASC,KAAKC,MAAsB,EAAhBD,KAAKE,UAE7B,OACE,eAAC,IAAD,WACE,sBAAKC,UAAU,WAAf,UACE,6CACA,6BAAKP,KAAKC,MAAMC,WAChB,4CACA,mBAAGM,MAAO,CAAEC,MAAkB,IAAXN,EAAe,QAAU,OAA5C,SACGH,KAAKC,MAAMS,UAEd,mBAAGF,MAAO,CAAEC,MAAkB,IAAXN,EAAe,QAAU,OAA5C,SACGH,KAAKC,MAAMU,UAEd,mBAAGH,MAAO,CAAEC,MAAkB,IAAXN,EAAe,QAAU,OAA5C,SACGH,KAAKC,MAAMW,UAEd,mBAAGJ,MAAO,CAAEC,MAAkB,IAAXN,EAAe,QAAU,OAA5C,SACGH,KAAKC,MAAMY,UAGd,cAAC,IAAD,CACEC,GAAG,IACHN,MAAoC,CAAEC,MAAO,WAF/C,wBAOF,cAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,a,GAhCLC,IAAMC,WAqCZnB,ICoFAoB,E,kDAvHb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDmB,MAAQ,CACXlB,SAAU,GACVQ,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,IAPM,E,2CAWnB,SAAQQ,EAAMC,GACZ,IAAIC,EAAYF,EAAKG,OAAOC,MAC5B,OAAQH,GACN,IAAK,WACHtB,KAAK0B,SAAS,CAAExB,SAAUqB,IAC1B,MAEF,IAAK,UACHvB,KAAK0B,SAAS,CAAEhB,QAASa,IACzB,MAEF,IAAK,UACHvB,KAAK0B,SAAS,CAAEf,QAASY,IACzB,MAEF,IAAK,UACHvB,KAAK0B,SAAS,CAAEd,QAASW,IACzB,MAEF,IAAK,UACHvB,KAAK0B,SAAS,CAAEb,QAASU,O,oBAM/B,WAAU,IAAD,OACP,OACE,cAAC,IAAD,UACE,uBAAMhB,UAAU,MAAhB,UACE,yBAAQA,UAAU,OAAlB,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKoB,IAAKC,EAAMrB,UAAU,WAAWsB,IAAI,SACzC,oBAAItB,UAAU,WAAd,+BAEF,mBAAGC,MAAO,CAAEC,MAAO,WAAnB,6CAGF,cAAC,IAAD,CACEM,OAAK,EACLC,KAAK,UACLc,OAAQ,SAAC7B,GAAD,OACN,cAAC,EAAD,2BACMA,GADN,IAEEC,SAAU,EAAKkB,MAAMlB,SACrBQ,QAAS,EAAKU,MAAMV,QACpBC,QAAS,EAAKS,MAAMT,QACpBC,QAAS,EAAKQ,MAAMR,QACpBC,QAAS,EAAKO,MAAMP,cAI1B,+BACE,sBAAKN,UAAU,cAAf,UACE,uIAIA,sBAAKA,UAAU,SAAf,UACE,0CACA,uBACEA,UAAU,gBACVe,KAAK,OACLS,YAAY,2BACZC,SAAU,SAACX,GAAD,OAAU,EAAKY,QAAQZ,EAAM,eAGzC,yCACA,uBACEC,KAAK,OACLS,YAAY,IACZC,SAAU,SAACX,GAAD,OAAU,EAAKY,QAAQZ,EAAM,cAEzC,uBACEC,KAAK,OACLS,YAAY,IACZC,SAAU,SAACX,GAAD,OAAU,EAAKY,QAAQZ,EAAM,cAEzC,uBACEC,KAAK,OACLS,YAAY,IACZC,SAAU,SAACX,GAAD,OAAU,EAAKY,QAAQZ,EAAM,cAEzC,uBACEC,KAAK,OACLS,YAAY,IACZC,SAAU,SAACX,GAAD,OAAU,EAAKY,QAAQZ,EAAM,cAEzC,uBACA,uBACA,uBACA,wBAAQC,KAAK,SAASY,MAAM,SAA5B,SACE,cAAC,IAAD,CACEpB,GAAG,UACHN,MAAoC,CAAEC,MAAO,WAF/C,uC,GAxGAQ,IAAMC,WCMJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASV,OACP,cAAC,IAAMW,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.23b2de6c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/move.804bc2c8.svg\";","import React from \"react\";\nimport \"./Result.css\";\nimport \"./App\";\nimport { Link, Route, BrowserRouter } from \"react-router-dom\";\n\nclass Result extends React.Component {\n  render() {\n    var questionsArray = [];\n    questionsArray = { question: this.props.question };\n    var Answer = Math.floor(Math.random() * 4);\n\n    return (\n      <BrowserRouter>\n        <div className=\"Solution\">\n          <label>Question</label>\n          <h5>{this.props.question}</h5>\n          <label>Options</label>\n          <p style={{ color: Answer === 0 ? \"Green\" : \"Red\" }}>\n            {this.props.answer1}\n          </p>\n          <p style={{ color: Answer === 1 ? \"Green\" : \"Red\" }}>\n            {this.props.answer2}\n          </p>\n          <p style={{ color: Answer === 2 ? \"Green\" : \"Red\" }}>\n            {this.props.answer3}\n          </p>\n          <p style={{ color: Answer === 3 ? \"Green\" : \"Red\" }}>\n            {this.props.answer4}\n          </p>\n\n          <Link\n            to=\"/\"\n            style={({ textDecoration: \"none\" }, { color: \"#282c34\" })}\n          >\n            Refresh\n          </Link>\n        </div>\n        <Route exact path=\"/\" />\n      </BrowserRouter>\n    );\n  }\n}\nexport default Result;\n","import React from \"react\";\nimport logo from \"./move.svg\";\nimport \"./App.css\";\nimport Result from \"./Result\";\nimport { Link, Route, BrowserRouter, Switch } from \"react-router-dom\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      question: \"\",\n      answer1: \"\",\n      answer2: \"\",\n      answer3: \"\",\n      answer4: \"\",\n    };\n  }\n\n  getItem(item, type) {\n    let itemValue = item.target.value;\n    switch (type) {\n      case \"question\": {\n        this.setState({ question: itemValue });\n        break;\n      }\n      case \"answer1\": {\n        this.setState({ answer1: itemValue });\n        break;\n      }\n      case \"answer2\": {\n        this.setState({ answer2: itemValue });\n        break;\n      }\n      case \"answer3\": {\n        this.setState({ answer3: itemValue });\n        break;\n      }\n      case \"answer4\": {\n        this.setState({ answer4: itemValue });\n        break;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <body className=\"App\">\n          <header className=\"body\">\n            <div className=\"brand\">\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              <h3 className=\"LogoText\">Decision Maker</h3>\n            </div>\n            <p style={{ color: \"#00000f\" }}>Your answer will appear here</p>\n          </header>\n\n          <Route\n            exact\n            path=\"/Result\"\n            render={(props) => (\n              <Result\n                {...props}\n                question={this.state.question}\n                answer1={this.state.answer1}\n                answer2={this.state.answer2}\n                answer3={this.state.answer3}\n                answer4={this.state.answer4}\n              />\n            )}\n          />\n          <body>\n            <div className=\"contentBody\">\n              <p>\n                Let us help you make those decisions that seem too difficult\n                with our random decision maker algorithm.\n              </p>\n              <div className=\"inputs\">\n                <h4>Question</h4>\n                <input\n                  className=\"questionInput\"\n                  type=\"text\"\n                  placeholder=\"Enter your question here\"\n                  onChange={(item) => this.getItem(item, \"question\")}\n                />\n\n                <h4>Options</h4>\n                <input\n                  type=\"text\"\n                  placeholder=\"A\"\n                  onChange={(item) => this.getItem(item, \"answer1\")}\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"B\"\n                  onChange={(item) => this.getItem(item, \"answer2\")}\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"C\"\n                  onChange={(item) => this.getItem(item, \"answer3\")}\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"D\"\n                  onChange={(item) => this.getItem(item, \"answer4\")}\n                />\n                <br />\n                <br />\n                <br />\n                <button type=\"button\" title=\"Submit\">\n                  <Link\n                    to=\"/Result\"\n                    style={({ textDecoration: \"none\" }, { color: \"#282c34\" })}\n                  >\n                    Submit\n                  </Link>\n                </button>\n              </div>\n            </div>\n          </body>\n        </body>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}